# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle # workflow의 이름

on: # 어떤 Events를 가지고 실행할것인가
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs: # 하나의 workflow는 여러개의 job을 가질 수 있다.
  build:

    runs-on: ubuntu-latest


    steps:  # job은 여러개의 step으로 구성되어 있다.
      - uses: actions/checkout@v3 # 다른 사람이 정의해둔 action을 사용해서 쓸 수 있다.
#      - name: Set up JDK 11
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'

#           github의 퍼블릭 레파지토리에 properties를 올리지 않기위해 .gitignore 에 추가 한후 GIT ACTION 단계에서 만들어서
#           github 원격 repo 의 SETTINGS/SECRETS/ACTIONS 에서 SECRET생성 Name=PROPERTIES,value=여기 PROPERTIES내용을 담아 저장
      - name: make application.properties
        run:
#          mkdir ./src/main/resources |
          touch ./src/main/resources/application.properties
        shell: bash

      - name: deliver application.properties
        run: echo "${{ secrets.PROPERTIES }}" > ./src/main/resources/application.properties
        shell: bash
#           스프링 프로젝트 jar 파일 빌드
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew # shell command을 실행할 수 있따.
        shell: bash

      - name: Build with Gradle
        run: ./gradlew build
        shell: bash
#           Docker Hub에 이미지 push 하기
      - name: Docker build
        run: |
          docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
          docker build -t spring-cicd .
          docker tag spring-cicd ${{ secrets.USERNAME }}/spring-cicd:${GITHUB_SHA::7}
          docker push ${{ secrets.USERNAME }}/spring-cicd:${GITHUB_SHA::7}
#           Docker Hub에 Push한 이미지를 리눅스 서버에 받아와서 run
      - name: Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ec2-15-164-210-28.ap-northeast-2.compute.amazonaws.com
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
           docker pull ${{ secrets.USERNAME }}/spring-cicd:${GITHUB_SHA::7}
           docker tag ${{ secrets.USERNAME }}/spring-cicd:${GITHUB_SHA::7} sulmocco
           docker stop server
           docker run --rm --name server -p 80:8080 -e TZ=Asia/Seoul -d sulmocco


